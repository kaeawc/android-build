name: "Commit"

on:
  push:
    branches: [ "main" ]
  pull_request:
    paths:
      - '.github/'
      - 'app/'
      - 'build.gradle.kts'
      - 'settings.gradle.kts'
      - 'gradle/wrapper/'
      - 'gradle.properties'

permissions:
  checks: write

jobs:
  unit_tests:
    name: "Unit Tests"
    runs-on: ubuntu-latest
    env:
      GRADLE_BUILD_ACTION_CACHE_DEBUG_ENABLED: true
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4

      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v1

      - name: Install JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '20'

      - name: "Print Java Flags & version"
        run: |
          java -XX:+UseParallelGC -XX:+UnlockExperimentalVMOptions -XX:+PrintFlagsFinal -version

      - name: "Evaluate Gradle Flags"
        run: |

          # Note that we do not attempt to visually align JVM args - spaces included in kotlin.daemon.jvmargs causes the Kotlin compiler daemon to not run and fallback to Gradle in-process
          export GRADLE_FLAGS="
            --continue
            --stacktrace
            -Dorg.gradle.configuration-cache.internal.report-link-as-warning=true
            "

          # Remove any newlines or tabs from GRADLE_FLAGS
          export GRADLE_FLAGS="${GRADLE_FLAGS//[$'\t\r\n']}"

          # Write temporary file for checksum
          echo "$GRADLE_FLAGS" > /tmp/gradle_flags.txt

          # Also export it to system environment in case this gets used in other commands
          echo 'export GRADLE_FLAGS=$(cat /tmp/gradle_flags.txt)' >> $GITHUB_ENV

          echo "Printing evaluated Gradle flags"
          echo "GRADLE_FLAGS: $GRADLE_FLAGS"

      - name: Restore Gradle Wrapper
        id: cache-gradle-wrapper
        uses: actions/cache/restore@v3
        with:
          path: |
            ~/.gradle/wrapper
          key: v1-${{ runner.os }}-gradle-wrapper-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}

      - name: Restore Gradle Home & Project Caches
        id: cache-gradle-home-project
        uses: actions/cache/restore@v3
        with:
          path: |
            ~/.gradle/caches
            .gradle
          key:
            v1-${{ runner.os }}-gradle-complete-${{ vars.JOB_NAME }}-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('gradle/libs.versions.toml') }}-${{ hashFiles('gradle.properties') }}-${{ hashFiles('/tmp/gradle_flags.txt') }}-${{ hashFiles('**/*.gradle.kts') }}
          restore-keys: |
            v1-${{ runner.os }}-gradle-partial-${{ vars.JOB_NAME }}-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('gradle/libs.versions.toml') }}-${{ hashFiles('gradle.properties') }}
            v1-${{ runner.os }}-gradle-partial-${{ vars.JOB_NAME }}-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('gradle/libs.versions.toml') }}
            v1-${{ runner.os }}-gradle-partial-${{ vars.JOB_NAME }}-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
            v1-${{ runner.os }}-gradle-partial-${{ vars.JOB_NAME }}

      - name: "Run Unit Tests via Gradle"
        run: ./gradlew testDebugUnitTest $GRADLE_FLAGS

      - name: "Publish Test Report"
        uses: mikepenz/action-junit-report@v4
        if: success() || failure() # always run even if the previous step fails
        with:
          report_paths: '**/build/test-results/testDebugUnitTest/TEST-*.xml'

      - uses: actions/cache/save@v3
        if: steps.cache-gradle-wrapper.outputs.cache-hit != 'true'
        with:
          path: |
            ~/.gradle/wrapper
          key:
            v1-${{ runner.os }}-gradle-wrapper-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}

      - name: "Clean Gradle Caches"
        if: steps.cache-gradle-home-project.outputs.cache-hit != 'true'
        run: |

            echo "Preserve project Gradle cache"
            find .gradle -maxdepth 1 -type d \
              -regex ".gradle/.*" \
              -not -regex ".*/8.4" \
              -not -regex ".*/configuration-cache" | \
              xargs rm -rf

            echo " "
            echo "Preserve Gradle home cache"
            find ~/.gradle/caches -maxdepth 1 -type d \
              -regex ".*/caches/.*" \
              -not -regex ".*/8.4" \
              -not -regex ".*/modules-2" \
              -not -regex ".*/jars-9" \
              -not -regex ".*/transforms-3" | \
              xargs rm -rf

            echo " "
            echo "Preserve Gradle home configuration cache keystore and any generated Gradle jars"
            find ~/.gradle/caches/8.4 -maxdepth 1 -type d \
              -regex ".*/caches/8.4/.*" \
              -not -regex ".*/cc-keystore" \
              -not -regex ".*/kotlin-dsl" \
              -not -regex ".*/generated-gradle-jars" | \
              xargs rm -rf

            rm -rf gradle-plugin/build/kotlin

      - uses: actions/cache/save@v3
        if: steps.cache-gradle-home-project.outputs.cache-hit != 'true'
        with:
          path: |
            ~/.gradle/caches
            .gradle
          key:
            v1-${{ runner.os }}-gradle-complete-${{ vars.JOB_NAME }}-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('gradle/libs.versions.toml') }}-${{ hashFiles('gradle.properties') }}-${{ hashFiles('/tmp/gradle_flags.txt') }}-${{ hashFiles('**/*.gradle*') }}

      - uses: actions/cache/save@v3
        if: steps.cache-gradle-home-project.outputs.cache-hit != 'true'
        with:
          path: |
            ~/.gradle/caches
          key:
            v1-${{ runner.os }}-gradle-partial-${{ vars.JOB_NAME }}-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('gradle/libs.versions.toml') }}-${{ hashFiles('gradle.properties') }}

 # find build/reports/configuration-cache -type f -name "configuration-cache-report.html" -exec cp {} /tmp/configuration-cache-data/ \;