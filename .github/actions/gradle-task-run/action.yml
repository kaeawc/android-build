#file: noinspection YAMLSchemaValidation
name: "gradle-task-run"
description: ""
inputs:
  gradle-flags:
    description: "Set of options we will pass to ./gradlew"
    example: '["--continue", "--stacktrace"]'
    required: "true"
    default: "[]"
  gradle-tasks:
    description: "Set of tasks to be executed by ./gradlew"
    example: '["assembleDebug", "check"]'
    required: "true"
  job-name:
    description: "The name of the GitHub Action job being run"
    required: "true"
  allow-configuration-cache:
    description: "Whether to allow Configuration Cache reuse"
    required: "true"

outputs:
  gradle-home-project-cache-hit:
    value: ${{ steps.gradle-home-project.outputs.cache-hit }}
  cache-gradle-home-cache-hit:
    value: ${{ steps.cache-gradle-home.outputs.cache-hit }}
  cache-gradle-build-cache-hit:
    value: ${{ steps.cache-gradle-build.outputs.cache-hit }}

runs:
  using: "composite"
  steps:
  - name: "Gradle Wrapper Validation"
    uses: gradle/wrapper-validation-action@v1

  - name: "Install JDK"
    uses: actions/setup-java@v3
    with:
      distribution: 'zulu'
      java-version: '20'

  - uses: ./.github/actions/jemalloc-linux
    id: cache-jemalloc

  - name: "Print Java Flags & version"
    shell: bash
    run: |
      java -XX:+UseParallelGC -XX:+UnlockExperimentalVMOptions -XX:+PrintFlagsFinal -version

  - name: "Evaluate Gradle Flags"
    shell: bash
    run: |
      
      # Note that we do not attempt to visually align JVM args - spaces included in kotlin.daemon.jvmargs causes the Kotlin compiler daemon to not run and fallback to Gradle in-process
      export GRADLE_FLAGS="
        --continue
        --stacktrace
        $(if [ "${{ inputs.allow-configuration-cache }}" == "true" ]; then echo ""; else echo "--no-configuration-cache"; fi;)
        $(echo "${{ inputs.gradle-flags }}" | jq ".[]" -M -r)
        -Dorg.gradle.configuration-cache.internal.report-link-as-warning=true
        "
      
      # Remove any newlines or tabs from GRADLE_FLAGS
      export GRADLE_FLAGS="${GRADLE_FLAGS//[$'\t\r\n']}"
      
      # Write temporary file for checksum
      echo "$GRADLE_FLAGS" > /tmp/gradle_flags.txt
      
      echo "Printing evaluated Gradle flags"
      echo "GRADLE_FLAGS: $GRADLE_FLAGS"

  - name: "Restore Gradle Wrapper"
    id: cache-gradle-wrapper
    uses: actions/cache/restore@v3
    with:
      path: |
        ~/.gradle/wrapper
      key: v2-${{ runner.os }}-gradle-wrapper-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}

  - name: "Hash Gradle Tasks"
    uses: pplanel/hash-calculator-action@v1.3.1
    id: gradle-task-hash
    with:
      input: ${{ inputs.gradle-tasks }}
      method: MD5

  - name: "Restore Gradle Home & Project Caches"
    if: ${{ inputs.allow-configuration-cache }} == 'true'
    id: cache-gradle-home-project
    uses: actions/cache/restore@v3
    with:
      path: |
        ~/.gradle/caches
        .gradle
      key:
        v2-${{ runner.os }}-gradle-home-project-${{ steps.gradle-task-hash.outputs.digest }}-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('gradle/libs.versions.toml') }}-${{ hashFiles('gradle.properties') }}-${{ hashFiles('/tmp/gradle_flags.txt') }}-${{ hashFiles('**/*.gradle.kts') }}

  - name: "Restore Gradle Home Cache"
    if: steps.cache-gradle-home-project.outputs.cache-hit != 'true'
    id: cache-gradle-home
    uses: actions/cache/restore@v3
    with:
      path: |
        ~/.gradle/caches
      key:
        v2-${{ runner.os }}-gradle-home-${{ steps.gradle-task-hash.outputs.digest }}-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('gradle/libs.versions.toml') }}-${{ hashFiles('gradle.properties') }}
      restore-keys: |
        v2-${{ runner.os }}-gradle-home-${{ steps.gradle-task-hash.outputs.digest }}-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('gradle/libs.versions.toml') }}
        v2-${{ runner.os }}-gradle-home-${{ steps.gradle-task-hash.outputs.digest }}-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
        v2-${{ runner.os }}-gradle-home-${{ steps.gradle-task-hash.outputs.digest }}

  - name: "Restore Gradle Build Cache"
    id: cache-gradle-build
    uses: actions/cache/restore@v3
    with:
      path: |
        ~/.gradle/caches/build-cache-*
      key:
        v2-${{ runner.os }}-gradle-build-${{ steps.gradle-task-hash.outputs.digest }}-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('gradle/libs.versions.toml') }}-${{ hashFiles('gradle.properties') }}-${{ hashFiles('/tmp/gradle_flags.txt') }}-${{ hashFiles('**/*.gradle.kts') }}-${{ hashFiles('**/*.kt') }}
      restore-keys: |
        v2-${{ runner.os }}-gradle-build-${{ steps.gradle-task-hash.outputs.digest }}-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('gradle/libs.versions.toml') }}-${{ hashFiles('gradle.properties') }}-${{ hashFiles('/tmp/gradle_flags.txt') }}-${{ hashFiles('**/*.gradle.kts') }}
        v2-${{ runner.os }}-gradle-build-${{ steps.gradle-task-hash.outputs.digest }}-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('gradle/libs.versions.toml') }}-${{ hashFiles('gradle.properties') }}-${{ hashFiles('/tmp/gradle_flags.txt') }}
        v2-${{ runner.os }}-gradle-build-${{ steps.gradle-task-hash.outputs.digest }}-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('gradle/libs.versions.toml') }}
        v2-${{ runner.os }}-gradle-build-${{ steps.gradle-task-hash.outputs.digest }}-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}

  - name: "Run Unit Tests via Gradle"
    shell: bash
    run: |
      export GRADLE_FLAGS=$(cat /tmp/gradle_flags.txt)
      ./gradlew ${{ inputs.gradle-tasks }} $GRADLE_FLAGS

  - name: "Check if any JUnit tests reports were created"
    id: junit-reports-exist
    if: always() # always run even if the previous step fails
    uses: andstor/file-existence-action@v2
    with:
      files: "**/build/test-results/testDebugUnitTest/TEST-*.xml"

  - name: "Publish Test Report"
    uses: mikepenz/action-junit-report@v4
    if: steps.junit-reports-exist.outputs.files_exists == 'true'
    with:
      report_paths: '**/build/test-results/testDebugUnitTest/TEST-*.xml'

  - name: "Check if any Configuration Cache report was created"
    id: configuration-cache-report-exists
    if: success() || failure() # always run even if the previous step fails
    uses: andstor/file-existence-action@v2
    with:
      files: "build/reports/configuration-cache/**/*.html"

  - name: "Store Configuration Cache Report"
    uses: actions/upload-artifact@v3
    if: steps.configuration-cache-report-exists.outputs.files_exists == 'true'
    with:
      name: configuration-cache-report
      path: |
        build/reports/configuration-cache/**/*.html

  - name: "Save Gradle Wrapper"
    uses: actions/cache/save@v3
    if: steps.cache-gradle-wrapper.outputs.cache-hit != 'true'
    with:
      path: |
        ~/.gradle/wrapper
      key:
        v2-${{ runner.os }}-gradle-wrapper-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}

  - name: "Save Gradle Build Cache"
    uses: actions/cache/save@v3
    if: steps.cache-gradle-build.outputs.cache-hit != 'true'
    with:
      path: |
        ~/.gradle/caches/build-cache-*
      key:
        v2-${{ runner.os }}-gradle-build-${{ steps.gradle-task-hash.outputs.digest }}-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('gradle/libs.versions.toml') }}-${{ hashFiles('gradle.properties') }}-${{ hashFiles('/tmp/gradle_flags.txt') }}-${{ hashFiles('**/*.gradle.kts') }}-${{ hashFiles('**/*.kt') }}

  - name: "Prepare Gradle Project & Home Caches for Configuration Cache"
    if: ${{ inputs.allow-configuration-cache }} == 'true' && steps.cache-gradle-home-project.outputs.cache-hit != 'true'
    shell: bash
    run: |
      
      # TODO: Auto-detect when convention plugins are added, then preserve their build folders
      echo "Preserve project Gradle cache"
      find .gradle -maxdepth 1 -type d \
        -regex ".gradle/.*" \
        -not -regex ".*/8.4" \
        -not -regex ".*/configuration-cache" | \
        xargs rm -rf
      
      echo " "
      echo "Preserve Gradle home cache"
      find ~/.gradle/caches -maxdepth 1 -type d \
        -regex ".*/caches/.*" \
        -not -regex ".*/8.4" \
        -not -regex ".*/modules-2" \
        -not -regex ".*/jars-9" \
        -not -regex ".*/transforms-3" | \
        xargs rm -rf
      
      echo " "
      echo "Preserve Gradle home configuration cache keystore and any generated Gradle jars"
      find ~/.gradle/caches/8.4 -maxdepth 1 -type d \
        -regex ".*/caches/8.4/.*" \
        -not -regex ".*/cc-keystore" \
        -not -regex ".*/kotlin-dsl" \
        -not -regex ".*/generated-gradle-jars" | \
        xargs rm -rf
      
      # Remove Kotlin build results from any convention plugin build folder

  - name: "Save Gradle Home & Project cache"
    uses: actions/cache/save@v3
    if: ${{ inputs.allow-configuration-cache }} == 'true' && steps.cache-gradle-home-project.outputs.cache-hit != 'true'
    with:
      path: |
        ~/.gradle/caches
        .gradle
      key:
        v2-${{ runner.os }}-gradle-home-project-${{ steps.gradle-task-hash.outputs.digest }}-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('gradle/libs.versions.toml') }}-${{ hashFiles('gradle.properties') }}-${{ hashFiles('/tmp/gradle_flags.txt') }}-${{ hashFiles('**/*.gradle.kts') }}

  - name: "Prepare Gradle Home Cache with only Dependency & Script Caches"
    if: steps.cache-gradle-home-project.outputs.cache-hit != 'true' && steps.cache-gradle-home.outputs.cache-hit != 'true'
    shell: bash
    run: |
      
      echo " "
      echo "Preserve Gradle home cache"
      find ~/.gradle/caches -maxdepth 1 -type d \
        -regex ".*/caches/.*" \
        -not -regex ".*/8.4" \
        -not -regex ".*/modules-2" | \
        xargs rm -rf
      
      echo " "
      echo "Preserve Gradle home configuration cache keystore and any generated Gradle jars"
      find ~/.gradle/caches/8.4 -maxdepth 1 -type d \
        -regex ".*/caches/8.4/.*" \
        -not -regex ".*/kotlin-dsl" \
        -not -regex ".*/generated-gradle-jars" | \
        xargs rm -rf

  - name: "Save Gradle Home cache"
    uses: actions/cache/save@v3
    if: steps.cache-gradle-home-project.outputs.cache-hit != 'true' && steps.cache-gradle-home.outputs.cache-hit != 'true'
    with:
      path: |
        ~/.gradle/caches
      key:
        v2-${{ runner.os }}-gradle-home-${{ steps.gradle-task-hash.outputs.digest }}-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('gradle/libs.versions.toml') }}-${{ hashFiles('gradle.properties') }}
